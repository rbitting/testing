on:
  pull_request_target:
    paths:
      - '**.md'
  pull_request:
    types:
      - closed

jobs:
  # "Deploys" to dev environment
  #deploy-dev:
    #runs-on: 'ubuntu-latest'
    #environment: 'dev'
    #steps:
      #- run: echo "dev is deployed"

  # "Deploys" to staging environment
  deploy-qa:
    #if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    environment: 'qa'
    #needs: [deploy-dev]
    steps:
    - name: Set Job Summary
      id: set_job_summary
      run: |
        URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls/${{ github.event.pull_request.number }}/files"
        eval FILES=\($(curl -s -X GET -G $URL | jq '.[].filename')\)
        echo "### QA deploy" >> $GITHUB_STEP_SUMMARY
        echo "## Markdown Files Updated" >> $GITHUB_STEP_SUMMARY
        echo "These files were sent to AEM for injestion."
        PAYLOAD_FILES=""
        for i in "${FILES[@]}"
        do
          if [[ $1 == *\.md ]]
          then
            echo "* $i" >> $GITHUB_STEP_SUMMARY
            PAYLOAD_FILES="$PAYLOAD_FILES$i,"
          fi 
        done

        echo "## Preview URLs" >> $GITHUB_STEP_SUMMARY
        if [[ $PAYLOAD != "" ]]
        then
          # Send $PAYLOAD_FILES to AEM endpoint here. AEM injests Github files then returns the publish staging URLs.
          echo "(URL path retrieved from dummy endpoint. This should print actual AEM preview URLs based on build of updated files above.)" >> $GITHUB_STEP_SUMMARY
          curl -X GET -s -S "https://raw.githubusercontent.com/rbitting/testing/master/test.json" | jq --raw-output '.url' >> $GITHUB_STEP_SUMMARY
        else
          echo "No .md files were updated in this PR." >> $GITHUB_STEP_SUMMARY
        fi

  # "Deploys" to prod environment
  # In environment settings of repo, be sure that prod has reviewers assigned
  deploy-prod:
    runs-on: 'ubuntu-latest'
    environment: 'prod'
    needs: [deploy-qa] #[deploy-dev, deploy-qa]
    steps:
      - run: echo "### Prod deploy" >> $GITHUB_STEP_SUMMARY
